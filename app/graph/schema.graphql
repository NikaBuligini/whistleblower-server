input AuthenticationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type AuthenticationPayload {
  viewer: User
  clientMutationId: String
}

input ChangeServiceStatusInput {
  serviceId: String!
  status: Boolean!
  clientMutationId: String
}

type ChangeServiceStatusPayload {
  service: Service!
  viewer: User!
  clientMutationId: String
}

input CreateProjectInput {
  name: String!
  clientMutationId: String
}

type CreateProjectPayload {
  projectEdge: ProjectEdge!
  viewer: User!
  clientMutationId: String
}

input CreateServiceInput {
  projectId: String!
  name: String!
  type: String!
  clientMutationId: String
}

type CreateServicePayload {
  serviceEdge: ServiceEdge!
  viewer: User!
  clientMutationId: String
}

type Mutation {
  # Authenticate user using email and password
  authenticate(input: AuthenticationInput!): AuthenticationPayload

  # Create new project
  createProject(input: CreateProjectInput!): CreateProjectPayload

  # Create new service for project
  createService(input: CreateServiceInput!): CreateServicePayload

  # Change status of service
  changeServiceStatus(input: ChangeServiceStatusInput!): ChangeServiceStatusPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Payload for service
type Payload {
  id: ID!
  data: String
  created_at: String
}

# A project
type Project implements Node {
  # The ID of an object
  id: ID!
  name: String
  uuid: String

  # Services for project
  services(after: String, first: Int, before: String, last: Int): ServiceConnection
  created_at: String
  updated_at: String
}

# A connection to a list of items.
type ProjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProjectEdge]

  # Total count of projects
  totalCount: Int
}

# An edge in a connection.
type ProjectEdge {
  # The item at the end of the edge
  node: Project

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Get all users
  users: [User]

  # Get single user by id
  user(
    # User id
    id: String!
  ): User
  projects(id: String, name: String, userId: String): [Project]
  services(id: String!): [Service]
  viewer: User
}

# A service
type Service implements Node {
  # The ID of an object
  id: ID!
  name: String
  type: String
  status: String
  timeout: Int
  isActive: Boolean
  uuid: String
  payload: [Payload]
  created_at: String
  updated_at: String
}

# A connection to a list of items.
type ServiceConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ServiceEdge]
}

# An edge in a connection.
type ServiceEdge {
  # The item at the end of the edge
  node: Service

  # A cursor for use in pagination
  cursor: String!
}

# A user
type User implements Node {
  # The ID of an object
  id: ID!
  fullname: String
  email: String
  roles: [String]
  last_login: String
  created_at: String
  updated_at: String

  # Visible projects for user
  projects(after: String, first: Int, before: String, last: Int): ProjectConnection

  # List of projects for administrator
  allProjects(after: String, first: Int, before: String, last: Int): ProjectConnection

  # Single project
  project(name: String!): Project
}
